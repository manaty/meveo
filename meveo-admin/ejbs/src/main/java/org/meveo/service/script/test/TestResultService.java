/**
 * 
 */
package org.meveo.service.script.test;

import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.Transactional;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.jpa.EntityManagerWrapper;
import org.meveo.jpa.MeveoJpa;
import org.meveo.model.IEntity;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.model.tests.TestResultDto;
import org.meveo.service.base.local.IPersistenceService;

/**
 * 
 * @author clement.bareth
 * @since 6.10.0
 * @version 6.10.0
 */
@Transactional
public class TestResultService implements IPersistenceService<TestResultDto>{
	
	@Inject
	@MeveoJpa
	private EntityManagerWrapper emWrapper;
	
	@Override
	public List<TestResultDto> list() {
		return list(null);
	}

	@Override
	public List<TestResultDto> list(PaginationConfiguration config) {
		String query = "SELECT new org.meveo.model.tests.TestResultDto(jeri) FROM JobExecutionResultImpl jeri \r\n" + 
				"    JOIN jeri.jobInstance ji, \r\n" + 

				"    Function fn\r\n" + 
				"    LEFT JOIN fn.category fnCategory \r\n" + 
				"\r\n" + 
				"WHERE jeri.endDate = (\r\n" + 
				"    SELECT max(jeri1.endDate)\r\n" + 
				"    FROM JobExecutionResultImpl jeri1 \r\n" + 
				"    WHERE jeri1.jobInstance.id = ji.id\r\n" + 
				")\r\n" + 
				"AND ji.jobCategoryEnum = 'TEST'\r\n" + 
				"AND fn.code = ji.parametres\r\n";
		
		//  Filters 
		if(config != null && config.getFilters().containsKey("category.code")) {
			query += "AND fnCategory.code = :code ";
		}
		
		if(config != null && config.getFilters().get("date") != null) {
			List<Date> dateFilter = (List<Date>) config.getFilters().get("date");
			if(dateFilter.size() > 1) {
				query += "AND jeri.endDate BETWEEN :startDate AND :endDate ";
			}
		}
		
		if(config != null && config.getFilters().get("active") != null) {
			boolean active = (boolean) config.getFilters().get("active");
			if(active) {
				query += "AND ji.disabled = false ";
			}
		}
		
		TypedQuery<TestResultDto> typedQuery = emWrapper.getEntityManager()
				.createQuery(query, TestResultDto.class);
		
		//  Filters values 
		if(config != null && config.getFilters().containsKey("category.code")) {
			typedQuery.setParameter("code", config.getFilters().get("category.code"));
		}
		
		if(config != null && config.getFilters().get("date") != null) {
			List<Date> dateFilter = (List<Date>) config.getFilters().get("date");
			if(dateFilter.size() > 1) {
				typedQuery.setParameter("startDate", dateFilter.get(0))
					.setParameter("endDate", dateFilter.get(1));
			}
		}
		
		return typedQuery.getResultList();
	}

	@Override
	public long count() {
		return count(null);
	}

	@Override
	public long count(PaginationConfiguration config) {
		String query = "SELECT COUNT(jeri) FROM JobExecutionResultImpl jeri \r\n" + 
				"    JOIN jeri.jobInstance ji, \r\n" + 

				"    Function fn\r\n" + 
				"    LEFT JOIN fn.category fnCategory \r\n" + 
				"\r\n" + 
				"WHERE jeri.endDate = (\r\n" + 
				"    SELECT max(jeri1.endDate)\r\n" + 
				"    FROM JobExecutionResultImpl jeri1 \r\n" + 
				"    WHERE jeri1.jobInstance.id = ji.id\r\n" + 
				")\r\n" + 
				"AND ji.jobCategoryEnum = 'TEST'\r\n" + 
				"AND fn.code = ji.parametres\r\n";
		
		//  Filters 
		if(config != null && config.getFilters().containsKey("category.code")) {
			query += "AND fnCategory.code = :code ";
		}
		
		TypedQuery<Long> typedQuery = emWrapper.getEntityManager()
				.createQuery(query, Long.class);
		
		//  Filters values 
		if(config != null && config.getFilters().containsKey("category.code")) {
			typedQuery.setParameter("code", config.getFilters().get("category.code"));
		}
		
		return typedQuery.getSingleResult();
	}
	
	@Override
	public List<TestResultDto> listActive() {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto findById(Long id) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto findById(Long id, List<String> fetchFields) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto findById(Long id, boolean refresh) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto findById(Long id, List<String> fetchFields, boolean refresh) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void create(TestResultDto e) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public TestResultDto update(TestResultDto e) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto disable(Long id) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto disable(TestResultDto e) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto enable(Long id) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto enable(TestResultDto e) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void remove(Long id) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public void remove(TestResultDto e) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public void remove(Set<Long> ids) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public Class<TestResultDto> getEntityClass() {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void detach(TestResultDto entity) {
		// TODO Autogenerated method stub
		
	}

	@Override
	public void refresh(IEntity entity) {
		// TODO Autogenerated method stub
		
	}

	@Override
	public TestResultDto refreshOrRetrieve(TestResultDto entity) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public List<TestResultDto> refreshOrRetrieve(List<TestResultDto> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public Set<TestResultDto> refreshOrRetrieve(Set<TestResultDto> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public TestResultDto retrieveIfNotManaged(TestResultDto entity) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public List<TestResultDto> retrieveIfNotManaged(List<TestResultDto> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public Set<TestResultDto> retrieveIfNotManaged(Set<TestResultDto> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void flush() {
		// TODO Autogenerated method stub
		
	}

	@Override
	public EntityManager getEntityManager() {
		// TODO Autogenerated method stub
		return null;
	}
	
	

}