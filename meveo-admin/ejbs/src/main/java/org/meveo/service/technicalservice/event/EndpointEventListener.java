package org.meveo.service.technicalservice.event;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.enterprise.event.Observes;
import javax.enterprise.event.TransactionPhase;
import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.event.logging.LoggedEvent;
import org.meveo.event.qualifier.Created;
import org.meveo.event.qualifier.Removed;
import org.meveo.event.qualifier.Updated;
import org.meveo.model.git.GitRepository;
import org.meveo.model.technicalservice.endpoint.Endpoint;
import org.meveo.service.git.GitClient;
import org.meveo.service.git.MeveoRepository;
import org.meveo.service.technicalservice.endpoint.ESGeneratorService;
import org.meveo.service.technicalservice.endpoint.EndpointService;
import org.slf4j.Logger;

/**
 * Process CRUD events generated by {@link Endpoint}.
 * 
 * @author Edward P. Legaspi | czetsuya@gmail.com
 * @version 6.10.0
 */
@Singleton
@Startup
@LoggedEvent
@Lock(LockType.READ)
public class EndpointEventListener {

	@Inject
	private Logger log;

	@Inject
	private EndpointService endpointService;

	@Inject
	private GitClient gitClient;

	@Inject
	private ESGeneratorService esGeneratorService;

	@Inject
	@MeveoRepository
	private GitRepository meveoRepository;

	/**
	 * Create and commit the generated JS file to call the endpoint. Automatically
	 * called at endpoint's creation.
	 *
	 * @param endpoint Created endpoint
	 * @return the generated file
	 * @throws IOException       if file cannot be created
	 * @throws BusinessException if the changes can't be commited
	 */
	public File createESFile(@Observes(during = TransactionPhase.AFTER_SUCCESS) @Created Endpoint endpoint) throws IOException, BusinessException {

		List<File> filesToCommit = new ArrayList<>();
		// check if base interface exists
		if (!endpointService.isBaseEndpointScriptExists()) {
			final File baseScriptFile = endpointService.getBaseScriptFile();
			FileUtils.write(baseScriptFile, esGeneratorService.buildBaseEndpointInterface(""), StandardCharsets.UTF_8);
			filesToCommit.add(baseScriptFile);
		}

		final File scriptFile = endpointService.getScriptFile(endpoint);
		FileUtils.write(scriptFile, esGeneratorService.buildJSInterface(endpoint), StandardCharsets.UTF_8);
		filesToCommit.add(scriptFile);

		gitClient.commitFiles(meveoRepository, Collections.singletonList(scriptFile), "Create JS script for endpoint " + endpoint.getCode());

		return scriptFile;
	}

	/**
	 * Update (or create if not exists yet) the generated JS file to call the
	 * endpoint and commit the changes if there are any. Automatically called at
	 * endpoint's update.
	 *
	 * @param endpoint Updated endpoint
	 * @return the updated generated file
	 * @throws IOException       if file cannot be created or overwritten
	 * @throws BusinessException if the changes can't be commited
	 */
	public File updateESFile(@Observes(during = TransactionPhase.AFTER_SUCCESS) @Updated Endpoint endpoint) throws IOException, BusinessException {

		log.debug("[CDI event] on update es file with id={}", endpoint.getId());
		final File scriptFile = endpointService.getScriptFile(endpoint);
		String updatedScript = esGeneratorService.buildJSInterface(endpoint);

		if (!scriptFile.exists() || !FileUtils.readFileToString(scriptFile).equals(updatedScript)) {
			FileUtils.write(scriptFile, updatedScript);
			gitClient.commitFiles(meveoRepository, Collections.singletonList(scriptFile), "Update JS script for endpoint " + endpoint.getCode());
		}

		return scriptFile;
	}

	/**
	 * Remove the generated JS file from Meveo git repository. Called at endpoint's
	 * deletion.
	 *
	 * @param endpoint Removed endpoint
	 * @return the result of {@link File#delete()} called on the script file
	 * @throws BusinessException if the changes can't be commited
	 */
	public boolean removeESFile(@Observes(during = TransactionPhase.AFTER_SUCCESS) @Removed Endpoint endpoint)
			throws BusinessException {

		File scriptFile = endpointService.getScriptFile(endpoint);
		boolean flag = true;
		if (scriptFile != null) {
			File parentDir = scriptFile.getParentFile();
			flag = scriptFile.delete();
			parentDir.delete();
			gitClient.commitFiles(meveoRepository, Arrays.asList(scriptFile, parentDir),
					"Delete JS dir and script for endpoint " + endpoint.getCode());
		}

		return flag;
	}
}
